import { searchFAQWithGemma } from "./util/faq.js";
import { loadHistory, saveHistory } from "./util/history.js";
import { classify, isAllowedQuestion, isOperatorRequest } from "./util/classifier.js";
import {
  totalQuestions,
  answeredByFAQ,
  answeredByLLM,
  forwardedToOperator,
  responseTime
} from "./metrics.js";
import fs from "fs";  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fs –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤

const LOG_FILE = "./data/logs.txt";  // –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
function logInteraction(question, category, source, answer) {
  const logLine =
    `[${new Date().toISOString()}] –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
    `–í–æ–ø—Ä–æ—Å: ${question}\n–û—Ç–≤–µ—Ç: ${answer}\n\n`;
  fs.appendFileSync(LOG_FILE, logLine, "utf8");
}

// –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
export async function getAnswer(question) {
  totalQuestions.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const start = Date.now(); // –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

  let finalAnswer, source;
  let category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  if (isOperatorRequest(question)) {
    finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
    source = "operator";
    forwardedToOperator.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤
  } else if (!isAllowedQuestion(question)) {
    finalAnswer = "‚ö†Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.";
    source = "filter";
  } else {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    category = await classify(question);

    if (category === "–û—à–∏–±–∫–∏") {
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        finalAnswer = `${faqGemma.answer}`;
        source = "faq";
        answeredByFAQ.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ FAQ
      } else {
        finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
        source = "operator-fallback";
        forwardedToOperator.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤
      }
    } else {
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        finalAnswer = `${faqGemma.answer}`;
        source = "faq";
        answeredByFAQ.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ FAQ
      } else {
        finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
        source = "operator-fallback";
        forwardedToOperator.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤
      }
    }
  }

  const elapsedTime = Date.now() - start; // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  responseTime.observe(elapsedTime); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞

  saveHistory({ role: "user", content: question }, { role: "assistant", content: finalAnswer });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥–∏
  logInteraction(question, category, source, finalAnswer);

  return { answer: finalAnswer, meta: { source } };
}
