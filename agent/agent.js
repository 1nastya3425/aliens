import { searchFAQWithGemma } from "./util/faq.js";
import { loadHistory, saveHistory } from "./util/history.js";
import { classify, isAllowedQuestion, isOperatorRequest } from "./util/classifier.js";
import {
  totalQuestions,
  answeredByFAQ,
  answeredByLLM,
  forwardedToOperator,
  responseTime
} from "./metrics.js";
import fs from "fs";  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fs –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
import axios from "axios";  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –º–æ–¥–µ–ª–∏
import { BANK_PROMPT } from "./prompt.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prompt –∏–∑ prompt.js

const LOG_FILE = "./data/logs.txt";  // –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
const LLAMA_URL = process.env.LLAMA_URL || "http://localhost:1235/v1/chat/completions"; // URL –¥–ª—è –º–æ–¥–µ–ª–∏ LLM

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
function logInteraction(question, category, source, answer) {
  const logLine =
    `[${new Date().toISOString()}] –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
    `–í–æ–ø—Ä–æ—Å: ${question}\n–û—Ç–≤–µ—Ç: ${answer}\n\n`;
  fs.appendFileSync(LOG_FILE, logLine, "utf8");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ LLM
async function askLLMWithHistory(question, history) {
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é, —É–±–∏—Ä–∞—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  const filteredHistory = history.filter(msg => msg && msg.role && msg.content);

  const messages = [
    { role: "system", content: BANK_PROMPT },  // –ò—Å–ø–æ–ª—å–∑—É–µ–º BANK_PROMPT –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ...filteredHistory.map((msg) => ({ role: msg.role, content: msg.content })),
    { role: "user", content: question }
  ];

  try {
    const response = await axios.post(LLAMA_URL, {
      model: "fireball-meta-llama-3.2-8b-instruct-agent-003-128k-code-dpo",
      messages: messages,
      temperature: 0.3, // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã" –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    });

    return { answer: response.data.choices[0].message.content.trim() };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ LLM:", error);
    return { answer: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞." };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
export async function getAnswer(question) {
  totalQuestions.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const start = Date.now(); // –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

  let finalAnswer, source;
  let category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  if (isOperatorRequest(question)) {
    finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
    source = "operator";
    forwardedToOperator.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤
  } else if (!isAllowedQuestion(question)) {
    finalAnswer = "‚ö†Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.";
    source = "filter";
  } else {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    category = await classify(question);

    if (category === "–û—à–∏–±–∫–∏") {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ FAQ —á–µ—Ä–µ–∑ Gemma
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        finalAnswer = `${faqGemma.answer}`;
        source = "faq";
        answeredByFAQ.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ FAQ
      } else {
        // –ï—Å–ª–∏ Gemma –Ω–µ –Ω–∞—à–ª–∞ –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM
        const history = loadHistory();
        const { answer } = await askLLMWithHistory(question, history);
        finalAnswer = answer;
        source = "llm";
        answeredByLLM.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç LLM
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ FAQ —á–µ—Ä–µ–∑ Gemma
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        finalAnswer = `${faqGemma.answer}`;
        source = "faq";
        answeredByFAQ.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ FAQ
      } else {
        // –ï—Å–ª–∏ Gemma –Ω–µ –Ω–∞—à–ª–∞ –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM
        const history = loadHistory();
        const { answer } = await askLLMWithHistory(question, history);
        finalAnswer = answer;
        source = "llm";
        answeredByLLM.inc(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç LLM
      }
    }
  }

  const elapsedTime = Date.now() - start; // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  responseTime.observe(elapsedTime); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞

  saveHistory({ role: "user", content: question }, { role: "assistant", content: finalAnswer });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥–∏
  logInteraction(question, category, source, finalAnswer);

  return { answer: finalAnswer, meta: { source } };
}
