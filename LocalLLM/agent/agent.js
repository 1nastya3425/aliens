import fs from "fs";
import axios from "axios";
import { BANK_PROMPT } from "./prompt.js";
import { isAllowedQuestion, isOperatorRequest, classifySimple } from "./classifier.js";

// –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑ prom-client
import {
  totalQuestions,
  answeredByFAQ,
  answeredByLLM,
  forwardedToOperator,
  responseTime
} from "./metrics.js";

// –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
const faq = JSON.parse(fs.readFileSync("./faq.json", "utf-8"));

// URL –º–æ–¥–µ–ª–µ–π
const GEMMA_URL = process.env.GEMMA_URL || "http://localhost:1235/v1/chat/completions";
const MISTRAL_URL = process.env.MISTRAL_URL || "http://localhost:1236/v1/chat/completions";

// –ü—É—Ç–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏
const HISTORY_FILE = "/app/data/chat_history.json";
const LOG_FILE = "/app/data/logs.txt";

// --- –£—Ç–∏–ª–∏—Ç—ã ---
const RU_STOPWORDS = new Set([
  "–∏", "–∏–ª–∏", "–∞", "–Ω–æ", "—á—Ç–æ", "–∫–∞–∫", "–≤", "–≤–æ", "–Ω–∞", "–∑–∞", "–ø–æ", "–∏–∑", "–æ—Ç", "–¥–æ", "–¥–ª—è",
  "–ø—Ä–∏", "–Ω–∞–¥", "–ø–æ–¥", "–æ", "–æ–±", "–ø—Ä–æ", "—É", "–∫", "—Å", "—Å–æ", "–∂–µ", "–ª–∏", "–±—ã", "—Ç–æ", "—ç—Ç–æ",
  "—ç—Ç–æ—Ç", "—ç—Ç–∞", "—ç—Ç–∏", "—Ç–æ—Ç", "—Ç–∞", "—Ç–µ", "–º–æ–π", "–º–æ—è", "–º–æ–∏", "—Ç–≤–æ–π", "—Ç–≤–æ—è", "—Ç–≤–æ–∏",
  "–≤–∞—à", "–≤–∞—à–∞", "–≤–∞—à–∏", "–∏—Ö", "–µ–≥–æ", "–µ–µ", "–µ—Å—Ç—å", "–Ω–µ—Ç", "–Ω–µ", "–¥–∞", "–∂–µ"
]);

function tokens(s) {
  return s
    .toLowerCase()
    .replace(/[^\p{L}\p{N}\s]+/gu, " ")
    .split(/\s+/)
    .filter(t => t && !RU_STOPWORDS.has(t));
}

function overlapRatio(a, b) {
  const A = new Set(tokens(a));
  const B = new Set(tokens(b));
  if (!A.size || !B.size) return 0;
  let inter = 0; A.forEach(t => { if (B.has(t)) inter++; });
  return inter / Math.min(A.size, B.size);
}

function hasHttpCode(s) {
  const m = s.match(/\b(4\d\d|5\d\d)\b/);
  return m ? m[0] : null;
}

function buildFaqSubset(question) {
  const q = question.toLowerCase();
  const tags = [];
  if (/–ø–∞—Ä–æ–ª|–ª–æ–≥–∏–Ω|–≤—Ö–æ–¥|–∞–∫–∫–∞—É–Ω—Ç/.test(q)) tags.push("–ø–∞—Ä–æ–ª", "–ª–æ–≥–∏–Ω", "–≤—Ö–æ–¥", "–∞–∫–∫–∞—É–Ω—Ç");
  if (/–æ–ø–ª–∞—Ç|–∫–∞—Ä—Ç|–ø–æ–¥–ø–∏—Å–∫|—á–µ–∫|—Å—á–µ—Ç|—Å—á—ë—Ç/.test(q)) tags.push("–æ–ø–ª–∞—Ç", "–∫–∞—Ä—Ç", "–ø–æ–¥–ø–∏—Å–∫", "—á–µ–∫", "—Å—á–µ—Ç", "—Å—á—ë—Ç");
  if (/–æ—à–∏–±–∫|–≤—ã–ª–µ—Ç–∞|–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç|–∑–∞–≤–∏—Å–∞–µ—Ç|–±–∞–≥|–∫–æ–¥/.test(q)) tags.push("–æ—à–∏–±–∫", "–≤—ã–ª–µ—Ç–∞", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–∑–∞–≤–∏—Å–∞–µ—Ç", "–±–∞–≥", "–∫–æ–¥");
  if (/email|–ø–æ—á—Ç/.test(q)) tags.push("email", "–ø–æ—á—Ç");

  const scored = faq.map((item, i) => {
    const fq = item.question.toLowerCase();
    const hasTag = tags.some(t => fq.includes(t));
    const ov = overlapRatio(q, fq);
    return { origIndex: i, question: item.question, answer: item.answer, score: ov, hasTag };
  });

  let subset = scored.filter(x => x.hasTag || x.score >= 0.12);
  if (!subset.length) subset = scored;
  subset.sort((a, b) => (b.hasTag - a.hasTag) || (b.score - a.score));
  return subset.slice(0, 25);
}

// --- FAQ —á–µ—Ä–µ–∑ Gemma ---
export async function searchFAQWithGemma(question) {
  const start = Date.now();
  try {
    const subset = buildFaqSubset(question);
    const listForModel = subset.map((it, i) => `[${i}] ${it.question}`).join("\n");

    const response = await axios.post(GEMMA_URL, {
      model: "google/gemma-3-1b",
      messages: [
        { role: "system", content: `–¢—ã ‚Äî –ø–æ–∏—Å–∫–æ–≤–∏–∫ FAQ –±–∞–Ω–∫–∞. –í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON: {"index": –ß–ò–°–õ–û, "confidence": –ß–ò–°–õ–û_0_1}` },
        { role: "user", content: `–í–æ–ø—Ä–æ—Å: "${question}"\n\n–°–ø–∏—Å–æ–∫ FAQ:\n${listForModel}` }
      ],
      temperature: 0
    });

    let raw = response.data.choices?.[0]?.message?.content?.trim() ?? "";
    raw = raw.replace(/```json/gi, "").replace(/```/g, "").trim();
    const s = raw.indexOf("{"), e = raw.lastIndexOf("}");
    if (s !== -1 && e !== -1) raw = raw.slice(s, e + 1);

    const parsed = JSON.parse(raw);
    const subIdx = Number(parsed.index);
    const conf = Number(parsed.confidence);

    responseTime.observe(Date.now() - start);

    if (!(subIdx >= 0 && subIdx < subset.length)) return null;
    if (conf < 0.85) return null;

    const picked = subset[subIdx];
    const ov = overlapRatio(question, picked.question);
    if (ov < 0.20) return null;

    const qCode = hasHttpCode(question);
    if (qCode) {
      const faqCode = hasHttpCode(picked.question);
      if (qCode !== faqCode) return null;
    }

    return { type: "faq", answer: faq[picked.origIndex].answer, confidence: conf, index: picked.origIndex };
  } catch (err) {
    console.error("‚ùå Gemma FAQ error:", err.message);
    return null;
  }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM ---
export async function askLLM(question) {
  const start = Date.now();
  try {
    const response = await axios.post(MISTRAL_URL, {
      model: "fireball-meta-llama-3.2-8b-instruct-agent-003-128k-code-dpo",
      messages: [
        { role: "system", content: BANK_PROMPT },
        { role: "user", content: question }
      ],
      temperature: 0.3
    });

    let answer = response.data.choices?.[0]?.message?.content?.trim() ?? "";
    const sentences = answer.split(/(?<=[.!?])\s+/);
    if (sentences.length > 2) answer = sentences.slice(0, 2).join(" ");

    responseTime.observe(Date.now() - start);
    return { type: "llm", answer };
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Mistra:", err.message);
    return { type: "error", answer: `–û—à–∏–±–∫–∞ LM Studio: ${err.message}` };
  }
}

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è ---
function logInteraction(question, category, source, answer) {
  const logLine =
    `[${new Date().toISOString()}] –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
    `–í–æ–ø—Ä–æ—Å: ${question}\n–û—Ç–≤–µ—Ç: ${answer}\n\n`;
  fs.appendFileSync(LOG_FILE, logLine, "utf8");
}

function saveHistory(userMsg, assistantMsg) {
  let history = [];
  if (fs.existsSync(HISTORY_FILE)) {
    try { history = JSON.parse(fs.readFileSync(HISTORY_FILE, "utf-8")) || []; }
    catch { history = []; }
  }
  history.push(userMsg, assistantMsg);
  fs.writeFileSync(HISTORY_FILE, JSON.stringify(history, null, 2));
}

// --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
export async function getAnswer(question) {
  totalQuestions.inc();

  const clean = question.toLowerCase().trim();
  let finalAnswer, source;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–∞–≤—Ç–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä)
  if (isOperatorRequest(clean)) {
    finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
    forwardedToOperator.labels("explicit").inc();  // —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    source = "operator";  // —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
  } else if (["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"].includes(clean)) {
    finalAnswer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!";
    source = "rule";
  } else if (["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"].includes(clean)) {
    finalAnswer = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!";
    source = "rule";
  } else if (!isAllowedQuestion(question)) {
    finalAnswer = "‚ö†Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.";
    source = "filter";
  } else {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const category = classifySimple(question);

    if (category === "–û—à–∏–±–∫–∏") {
      // –ï—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—à–∏–±–∫—É, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ FAQ
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        answeredByFAQ.inc();
        finalAnswer = `üìö –û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: ${faqGemma.answer}`;
        source = "faq";
      } else {
        finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
        forwardedToOperator.labels("fallback").inc();
        source = "operator-fallback";
      }
    } else {
      // –ò–Ω–∞—á–µ –∏–¥–µ–º –≤ –º–æ–¥–µ–ª—å
      const faqGemma = await searchFAQWithGemma(question);
      if (faqGemma) {
        answeredByFAQ.inc();
        finalAnswer = `üìö –û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: ${faqGemma.answer}`;
        source = "faq";
      } else {
        const llm = await askLLM(question);
        if (llm.type === "llm") {
          answeredByLLM.inc();
          finalAnswer = `ü§ñ –û—Ç–≤–µ—Ç –æ—Ç mistra: ${llm.answer}`;
          source = "llm";
        } else {
          forwardedToOperator.labels("fallback").inc();
          finalAnswer = "üßë‚Äçüíª –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.";
          source = "operator-fallback";
        }
      }
    }
  }

  saveHistory({ role: "user", content: question }, { role: "assistant", content: finalAnswer });
  logInteraction(question, classifySimple(question), source, finalAnswer);

  return { answer: finalAnswer, meta: { source } };
}
